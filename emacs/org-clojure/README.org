* Org mode with clojure and cider

** Install clojure

   See: https://clojure.org/guides/install_clojure

** Start a cider session

   Start a cider session by running =M-x cider-jack-in=. When it prompts you
   "Are you sure you want to run `cider-jack-in` without a Clojure project?",
   type "yes".

   Or, from elisp:

   #+begin_src emacs-lisp
     (let ((cider-allow-jack-in-without-project t))
       (cider-jack-in '()))
   #+end_src

   #+RESULTS:
   : #<process nrepl-server>

** Execute code blocks

   #+header: :backend cider
   #+begin_src clojure
     (def foo "hello")
     (range 3)
   #+end_src

   #+RESULTS:
   | #'user/foo |
   | (0 1 2)    |

   Since all code blocks are backed by the same cider session, there is no need
   for the =:session= header arg. Previously defined variables are available for
   use:

   #+header: :backend cider
   #+begin_src clojure
     foo
   #+end_src

   #+RESULTS:
   : hello

* Org mode with clojure and babashka

** Install babashka

** Execute code blocks

   Babashka code blocks are convenient because they don't require an
   already-running repl session. The trade-off is that they *can not* use a
   session; a babashka subprocess starts and ends with the execution of a code
   block, so state cannot be saved between one code block and another.

   #+header: :backend babashka
   #+begin_src clojure
     (range 3)
   #+end_src

   #+RESULTS:
   : (0 1 2)
